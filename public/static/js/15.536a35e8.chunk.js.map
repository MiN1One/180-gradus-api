{"version":3,"sources":["UI/SubSpinner/SubSpinner.js","../node_modules/nanoid/index.browser.js","components/Card/Card.js","containers/Categories/Categories.js"],"names":["SubSpinner","className","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Card","data","t","useTranslation","categoriesList","useSelector","state","categories","category","find","el","_id","categoryName","name","to","data-premium","exclusive","src","image","default","alt","device","width","height","type","Categories","mounted","useRef","useEffect","current","params","useParams","history","useHistory","useState","searchInput","setSearchInput","searchResults","setSearchResults","searchLoading","setSearchLoading","loading","setLoading","setData","fetchData","useCallback","categoryId","axiosInstance","then","devices","onInputSearch","search","e","preventDefault","cards","length","map","i","categoryItems","searchItems","cat","onMouseDown","push","findIndex","Error","notFound","Spinner","onSubmit","value","placeholder","onChange","target","onClick"],"mappings":"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","file":"static/js/15.536a35e8.chunk.js","sourcesContent":["const SubSpinner = ({ className }) => (<div className={`loading ${className ? className : ''}`}></div>);\r\n\r\nexport default SubSpinner;","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useTranslation } from 'react-i18next';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Card.scss';\r\n\r\nconst Card = ({ data }) => {\r\n    const { t } = useTranslation();\r\n    const categoriesList = useSelector(state => state.categories);\r\n\r\n    const category = data.category && categoriesList.find(el => el._id === data.category);\r\n    const categoryName = category && category.name;\r\n\r\n    return (\r\n        <Link \r\n            to={`/categories/skins/${data.category ? `${categoryName}/${data._id}` : data.name}`} \r\n            className=\"Card\"\r\n            data-premium={data.exclusive || false}>\r\n                <div className=\"Card__head\">\r\n                    <figure className=\"Card__figure\">\r\n                        <LazyLoadImage\r\n                            src={`/images/${data.image || data.default}`}\r\n                            alt={data.name || data.device}\r\n                            width=\"100%\"\r\n                            height=\"100%\"\r\n                            className=\"Card__img\" />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"Card__body\">\r\n                    <span className=\"heading heading--sm tc\">{data.name ? t(`nav.${data.name}`) : data.device}</span>\r\n                    <span className=\"heading heading--sub mt-1 tc\">{t(`nav.${data.type}`)}</span>\r\n                </div>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default Card;","import { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { BiSearch, BiX } from 'react-icons/bi';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Card from '../../components/Card/Card';\r\nimport axiosInstance from '../../axios';\r\nimport './Categories.scss';\r\nimport Error from '../../containers/Error/Error';\r\nimport SubSpinner from '../../UI/SubSpinner/SubSpinner';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\nconst Categories = ({ categories }) => {\r\n\r\n    const mounted = useRef();\r\n    useEffect(() => {\r\n        mounted.current = true;\r\n        return () => mounted.current = false;\r\n    }, []);\r\n\r\n    const { t } = useTranslation();\r\n    const params = useParams();\r\n    const history = useHistory();\r\n    \r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [searchResults, setSearchResults] = useState(null);\r\n    const [searchLoading, setSearchLoading] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n\r\n    const fetchData = useCallback(() => {\r\n        if (mounted.current) {\r\n            setLoading(true);\r\n            if (params.category) {\r\n                const categoryId = categories && categories.find(el => el.name === params.category);\r\n                categoryId && axiosInstance(`/categories/${categoryId._id}?project=devices`)\r\n                    .then(({ data }) => {\r\n                        setData(data.data.data.devices);\r\n                        setLoading(false);\r\n                    });\r\n            } else {\r\n                axiosInstance('/skins')\r\n                    .then(({ data }) => {\r\n                        setData(data.data.data);\r\n                        setLoading(false);\r\n                    });\r\n            }\r\n        }\r\n    }, [categories, params.category]);\r\n    \r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [params.category, categories, fetchData]);\r\n\r\n    // const handleScroll = (e) => {\r\n    //     const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\r\n    // };\r\n\r\n    const onInputSearch = (search, e) => {\r\n\r\n        if (e) e.preventDefault();\r\n        setSearchLoading(true);\r\n\r\n        setSearchInput(search);\r\n\r\n        if (search !== '' && mounted.current) {\r\n            axiosInstance(`/skins?search=${search}`)\r\n                .then(({ data }) => {\r\n                    if (e) {\r\n                        setData(data.data.data);\r\n                        setSearchResults(null);\r\n                    } else setSearchResults(data.data.data);\r\n                    setSearchLoading(false);\r\n                });\r\n        }\r\n    };\r\n\r\n    const cards = (data && data.length > 0) && data.map((el, i) => (\r\n        <Card data={el} key={nanoid()} />\r\n    ));\r\n\r\n    const categoryItems = (categories && !params.category) && categories.map((el, i) => (\r\n        <Card data={el} key={nanoid()} />\r\n    ));\r\n    \r\n    const searchItems = searchResults && searchResults.map((el, i) => {\r\n        const category = categories && categories.find(cat => cat._id === el.category);\r\n\r\n        return (\r\n            <div className=\"input__drop-item\" key={nanoid()} onMouseDown={() => history.push(`/categories/skins/${category && category.name}/${el._id}`)}>\r\n                <figure className=\"input__figure\">\r\n                    <img className=\"img\" src={`/images/${el.default}`} alt={el.device} />\r\n                </figure>\r\n                <div className=\"flex fdc\">\r\n                    <span className=\"text--sm c-black\">{el.device}</span>\r\n                    <span className=\"text--xs c-grey\">{t(`nav.${el.type}`)}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    const catExists = (categories && params.category) && categories.findIndex((el) => el.name === params.category) !== -1;\r\n    if (!catExists && mounted.current && params.category) return <Error notFound />;\r\n\r\n    if (loading)\r\n        return <Spinner />;\r\n\r\n    return (\r\n        <section className=\"Categories\">\r\n            <div className=\"container\">\r\n                <div className=\"Categories__head Categories__head--main\">\r\n                    <h1 className=\"heading heading--1 Categories__heading--main\">\r\n                        {params.category \r\n                            ? ((data && data.length > 0) && t(`nav.${params.category}`) )\r\n                            : t('nav.categories')\r\n                        }\r\n                    </h1>\r\n                    <form className=\"Categories__form\" onSubmit={(e) => onInputSearch(searchInput, e)}>\r\n                        <input \r\n                            className=\"input input--searchbar\" \r\n                            type=\"text\"\r\n                            value={searchInput}\r\n                            placeholder={t('main.search')}\r\n                            onChange={(e) => onInputSearch(e.target.value)} />\r\n                        <button type=\"submit\" className=\"Categories__search-btn\">\r\n                            <BiSearch className=\"icon icon--dark\" />\r\n                        </button>\r\n                        {searchInput && \r\n                            <div className=\"input__dropdown\">\r\n                                {searchLoading \r\n                                    ? <SubSpinner className=\"loading--sm\" />\r\n                                    : (searchItems && searchItems.length) ? searchItems : t('main.no results')\r\n                                }\r\n                            </div>\r\n                        }\r\n                        <button \r\n                            className=\"input--clear-btn\" \r\n                            type=\"button\"\r\n                            onClick={() => {\r\n                                setSearchInput('');\r\n                                fetchData();\r\n                                setSearchResults(null);\r\n                            }}>\r\n                            <BiX className=\"icon icon--dark\" />\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"Categories__body\">\r\n                    {!params.category &&\r\n                        <section className=\"Categories__group\">\r\n                            {categoryItems}\r\n                        </section>\r\n                    }\r\n                    <div className=\"Categories__head\">\r\n                        <h2 className=\"heading heading--main mr-1\">\r\n                            {params.category \r\n                                ? ((data && data.length > 0) && t('nav.popular'))\r\n                                : t(`nav.all ${params.type}`)\r\n                            }\r\n                        </h2>\r\n                    </div>\r\n                    {data && data.length > 0\r\n                        ? <section className=\"Categories__group pos-rel\">\r\n                            {cards}\r\n                        </section>\r\n                        : <div className=\"Categories__empty\">\r\n                            <h1 className=\"Categories__heading--grace\">\r\n                                {t(`nav.${params.category}`)}\r\n                            </h1>\r\n                            <h5 className=\"Categories__heading--sub\">\r\n                                {t('main.coming soon')}\r\n                            </h5>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                {/* <div className=\"Categories__footer\">\r\n                    \r\n                </div> */}\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Categories;"],"sourceRoot":""}