{"version":3,"sources":["UI/Backdrop/Backdrop.js","UI/SubSpinner/SubSpinner.js","UI/Confirm/Confirm.js","containers/AdminPanel/AdminPanel.js"],"names":["Backdrop","z","close","className","style","zIndex","onClick","SubSpinner","ConfirmationModel","click","items","message","t","useTranslation","Skins","useState","data","setData","panelLoading","setPanelLoading","fileInputRef","useRef","addMode","setAddMode","setEditMode","viewMode","setViewMode","selectedSkin","setSelectedSkin","confirm","setConfirm","newSkin","setNewSkin","useEffect","axiosInstance","then","console","log","devId","_id","skins","map","el","i","tabIndex","width","height","alt","name","effect","src","image","parseFloat","price","toFixed","devices","length","device","type","numberOfPurchases","formData","FormData","files","current","Array","from","forEach","append","patch","images","res","onSubmitSkin","Confirm","delete","newList","filter","placeholder","value","onChange","e","prev","target","accept","ref","id","newSkinsList","onRemoveSkin","reduce","a","Auth","onAuth","login","setLogin","password","setPassword","error","setError","loading","setLoading","Spinner","onSubmit","preventDefault","post","token","catch","er","response","onLogin","Date","getFullYear","AdminPanel","params","useParams","authorized","setAuthorized","setToken","defaults","headers","common","section","role","to","activeClassName","exact","path","jwt"],"mappings":"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","file":"static/js/14.5e274c79.chunk.js","sourcesContent":["import './Backdrop.scss';\r\n\r\nconst Backdrop = ({ z, close, className }) => (\r\n    <div \r\n        className={`backdrop ${className || ''}`} \r\n        style={{ zIndex: z }} \r\n        onClick={() => close()} />\r\n);\r\n\r\nexport default Backdrop;","const SubSpinner = ({ className }) => (<div className={`loading ${className ? className : ''}`}></div>);\r\n\r\nexport default SubSpinner;","import { useTranslation } from 'react-i18next';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nconst ConfirmationModel = ({ click, close, message, items }) => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <>\r\n            <Backdrop z={100} close={close} />\r\n            <div className=\"confirm\">\r\n                <div>\r\n                    <p className=\"confirm__text\">{t('main.confirm')}</p>\r\n                    {items && <p className=\"confirm__text--sub\">{t('main.to delete')}: {items}</p>}\r\n                </div>\r\n                <div className=\"flex w-100 jce\">\r\n                    <button className=\"btn btn__ghost btn__ghost--active mr-1\" onClick={click}>\r\n                        {t('main.apply')}\r\n                    </button>\r\n                    <button className=\"btn btn__ghost btn__ghost--active\" onClick={close}>\r\n                        {t('main.cancel')}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ConfirmationModel;","import { useEffect, useRef, useState } from 'react';\r\nimport { NavLink, Route, Switch, useParams } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport { BiMinus, BiPencil, BiScreenshot, BiX } from 'react-icons/bi';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './AdminPanel.scss';\r\nimport axiosInstance from '../../axios';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\nimport SubSpinner from '../../UI/SubSpinner/SubSpinner';\r\nimport ConfirmationModel from '../../UI/Confirm/Confirm';\r\n\r\nconst AdminPanel = () => {\r\n    const params = useParams();\r\n    const { t } = useTranslation();\r\n    const [authorized, setAuthorized] = useState(false);\r\n    const [token, setToken] = useState(null);\r\n    const [data, setData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axiosInstance.defaults.headers.common['Authorization'] = token && `Bearer ${token}`;\r\n    }, [token]);\r\n    \r\n    useEffect(() => {\r\n        if (token) {\r\n            axiosInstance(`/${params.section || 'skins'}`)\r\n                .then(res => {\r\n                    console.log(res);\r\n                    setData(res.data.data.data);\r\n                });\r\n        }\r\n    }, [token, params.section]);\r\n\r\n    if (!authorized)\r\n        return <Auth onAuth={(jwt) => {\r\n                setAuthorized(true);\r\n                setToken(jwt);\r\n            }} />;\r\n\r\n    return (\r\n        <>\r\n            <section className=\"admin\">\r\n                <div className=\"container\">\r\n                    <div className=\"admin__wrapper\">\r\n                        <nav className=\"admin__nav\" role=\"navigation\">\r\n                            <NavLink \r\n                                to=\"/admin\" \r\n                                activeClassName=\"admin__link--active\" \r\n                                className=\"admin__link\"\r\n                                exact>\r\n                                    {t('nav.dashboard')}\r\n                            </NavLink>\r\n                            <NavLink \r\n                                to=\"/admin/skins\" \r\n                                activeClassName=\"admin__link--active\" \r\n                                className=\"admin__link\">\r\n                                    {t('nav.skins')}\r\n                            </NavLink>\r\n                            <NavLink \r\n                                to=\"/admin/orders\" \r\n                                activeClassName=\"admin__link--active\" \r\n                                className=\"admin__link\">\r\n                                    {t('nav.orders')}\r\n                            </NavLink>\r\n                            <NavLink \r\n                                to=\"/admin/categories\" \r\n                                activeClassName=\"admin__link--active\" \r\n                                className=\"admin__link\">\r\n                                    {t('main.categories')}\r\n                            </NavLink>\r\n                            <NavLink \r\n                                to=\"/admin/users\" \r\n                                activeClassName=\"admin__link--active\" \r\n                                className=\"admin__link\">\r\n                                    {t('nav.users')}\r\n                            </NavLink>\r\n                        </nav>\r\n                        <div className=\"admin__body\">\r\n                            <Switch>\r\n                                <Route path=\"/admin/skins\">\r\n                                    <Skins token={token} />\r\n                                </Route>\r\n                                <Route path=\"/categories\">\r\n                                    Hello\r\n                                </Route>\r\n                                <Route path=\"/orders\">\r\n                                    Hello\r\n                                </Route>\r\n                                <Route path=\"/users\">\r\n                                    Hello\r\n                                </Route>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Skins = () => {\r\n    const { t } = useTranslation();\r\n    const [data, setData] = useState(null);\r\n    const [panelLoading, setPanelLoading] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const fileInputRef = useRef();\r\n\r\n    const [addMode, setAddMode] = useState(false);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [viewMode, setViewMode] = useState(false);\r\n    const [selectedSkin, setSelectedSkin] = useState(null);\r\n    const [confirm, setConfirm] = useState(null);\r\n    const [newSkin, setNewSkin] = useState(null);\r\n\r\n    // modes: add, remove, edit, view\r\n\r\n    useEffect(() => {\r\n        // setLoading(true);\r\n        axiosInstance('/skins')\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                // setLoading(false);\r\n                setData(data.data.data);\r\n            });\r\n    }, []);\r\n\r\n    const devId = viewMode && viewMode._id;\r\n    useEffect(() => setNewSkin(null), [devId]);\r\n\r\n    const getSkins = (device) => {\r\n        setPanelLoading(true)\r\n        axiosInstance(`/skins/${device._id}?project=skins`)\r\n            .then(({ data }) => {\r\n                setViewMode({\r\n                    ...device,\r\n                    skins: data.data.data.skins\r\n                });\r\n                setPanelLoading(false);\r\n            });\r\n\r\n        setConfirm(null);\r\n    };\r\n\r\n    const onRemoveSkin = (id) => {\r\n        const newSkinsList = viewMode.skins.filter(el => el._id !== id);\r\n\r\n        axiosInstance\r\n            .patch(`/skins/${viewMode._id}`, { skins: newSkinsList })\r\n            .then(res => {\r\n                setViewMode({\r\n                    ...viewMode,\r\n                    skins: newSkinsList\r\n                });\r\n                setConfirm(false);\r\n                console.log(res);\r\n            });\r\n    };\r\n\r\n    const onSubmitSkin = () => {\r\n        const formData = new FormData();\r\n        const { files } = fileInputRef.current;\r\n        console.log(files);\r\n\r\n        Array.from(files).forEach(el => {\r\n            formData.append(\"skinImage\", el);\r\n        });\r\n        \r\n        axiosInstance\r\n            .patch(\r\n                `/skins/${viewMode._id}`, \r\n                {\r\n                    // skins: [...viewMode.skins, newSkin],\r\n                    images: formData\r\n                }\r\n            )\r\n            .then((res) => {\r\n                console.log(res);\r\n            });\r\n    };\r\n\r\n    const onRemoveDevice = () => {\r\n        axiosInstance\r\n            .delete(`/skins/${viewMode._id}`)\r\n            .then((res) => {\r\n                const newList = data.filter(el => el._id !== viewMode._id);\r\n                setData(newList);\r\n                setViewMode(null);\r\n                setConfirm(null);\r\n            });\r\n    };\r\n        \r\n    const skins = (viewMode && viewMode.skins) && viewMode.skins.map((el, i) => (\r\n        <div \r\n            className={`admin__panel-item ${(selectedSkin && selectedSkin._id === el._id) ? 'admin__panel-item--active' : ''}`} \r\n            key={i} \r\n            tabIndex=\"0\" \r\n            onClick={() => setSelectedSkin(el)}>\r\n                <div className=\"flex aic\">\r\n                    <figure className=\"admin__panel-figure\">\r\n                        <LazyLoadImage\r\n                            className=\"img\"\r\n                            width=\"100%\"\r\n                            height=\"100%\"\r\n                            alt={el.name}\r\n                            effect=\"opacity\"\r\n                            src={`http://localhost:3003/images/${el.image}`} />\r\n                    </figure>\r\n                    <span className=\"admin__panel-itemname\">{el.name}</span>\r\n                </div>\r\n                <span className=\"admin__panel-itemprice\">${parseFloat(el.price).toFixed(2)}</span>\r\n        </div>\r\n    ));\r\n\r\n    const devices = (data && data.length > 0) && data.map((el, i) => (\r\n        <li \r\n            className=\"admin__item pos-rel\"\r\n            key={i}>\r\n                <div \r\n                    className={`admin__card ${(viewMode && el._id === viewMode._id) ? 'admin__card--active' : ''}`} \r\n                    onClick={() => {\r\n                        setEditMode(false);\r\n                        getSkins(el);\r\n                    }}\r\n                    tabIndex=\"0\">\r\n                        <div className=\"flex fdc mr-15\">\r\n                            <span className=\"admin__card-title\">{el.device}</span>\r\n                            <span className=\"heading heading--sub c-grey-l\">{el.type}</span>\r\n                        </div>\r\n                        <div className=\"flex\">\r\n                            <span className=\"admin__card-feature\">{t('main.num skins')}: {el.skins.length}</span>\r\n                            <span className=\"admin__card-feature\">{t('main.num purchases')}: {el.numberOfPurchases}</span>\r\n                        </div>\r\n                </div>\r\n                <div className=\"admin__card-sets\">\r\n                    {(viewMode && viewMode._id === el._id) && \r\n                        <button className=\"admin__card-btn\" onClick={() => setConfirm('device')}>\r\n                            <BiX className=\"icon--sm\" />\r\n                        </button>\r\n                    }\r\n                </div>\r\n        </li>\r\n    ));\r\n\r\n    // if (loading)\r\n    //     return <div className=\"wh-100 aic flex jcc\"><SubSpinner /></div>;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex w-100 jce mb-15\">\r\n                {viewMode &&\r\n                    <button \r\n                        className=\"btn btn__ghost btn__ghost--active mr-1\" \r\n                        onClick={() => \r\n                            !newSkin \r\n                                ? setNewSkin({\r\n                                    name: '',\r\n                                    price: '',\r\n                                    image: null\r\n                                })\r\n                                : onSubmitSkin()\r\n                        }>\r\n                            {newSkin ? t('main.save') : t('main.add skin')}\r\n                    </button>\r\n                }\r\n                <button \r\n                    className=\"btn btn__ghost btn__ghost--active\" \r\n                    onClick={() => {\r\n                        setAddMode(!addMode);\r\n                        setEditMode(false);\r\n                    }}>\r\n                        {addMode ? t('main.save') : t('main.add')}\r\n                </button>\r\n            </div>\r\n            <div className=\"flex w-100\">\r\n                {(confirm && confirm === 'device') &&\r\n                    <ConfirmationModel \r\n                        click={onRemoveDevice} \r\n                        close={() => setConfirm(null)}\r\n                        items={viewMode.device} />\r\n                }\r\n                {(data && data.length > 0)\r\n                    ? <div className=\"flex fdc w-100\">\r\n                        <Scrollbars className=\"fgr\" style={{ height: '25rem', width: '100%' }}>\r\n                            <ul className=\"admin__list\">{devices}</ul>\r\n                        </Scrollbars>\r\n                        {newSkin &&\r\n                            <div className=\"admin__form\">\r\n                                <div className=\"admin__panel-head\">\r\n                                    <div className=\"flex aic jcsb\">\r\n                                        <h1 className=\"heading heaing--main\">{t('main.add')}</h1>\r\n                                        <button \r\n                                            className=\"btn btn__circle\" \r\n                                            onClick={() => setNewSkin(null)}>\r\n                                                <BiX className=\"icon\" />\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"flex w-100\">\r\n                                    <div className=\"w-100\">\r\n                                        <label className=\"admin__card-feature w-100\">\r\n                                            {t('main.name')}\r\n                                            <input \r\n                                                className=\"admin__input\"\r\n                                                type=\"text\"\r\n                                                placeholder={t('main.name')}\r\n                                                value={newSkin.name}\r\n                                                onChange={(e) => \r\n                                                    setNewSkin(prev => ({ ...prev, name: e.target.value }))\r\n                                                } />\r\n                                        </label>\r\n                                        <label className=\"admin__card-feature w-100\">\r\n                                            {t('main.price')}\r\n                                            <input \r\n                                                className=\"admin__input\"\r\n                                                type=\"text\"\r\n                                                placeholder={t('main.price')}\r\n                                                value={newSkin.price}\r\n                                                onChange={(e) => \r\n                                                    setNewSkin(prev => ({ ...prev, price: e.target.value }))\r\n                                                } />\r\n                                        </label>\r\n                                        <input \r\n                                            className=\"none\"\r\n                                            type=\"file\"\r\n                                            accept=\"image/*\"\r\n                                            ref={fileInputRef} />\r\n                                    </div>\r\n                                    <div className=\"admin__images\">\r\n                                        <span className=\"admin__card-feature\">Images:</span>\r\n                                        <button \r\n                                            className=\"btn btn__ghost btn__ghost--active\" \r\n                                            type=\"button\"\r\n                                            onClick={() => fileInputRef.current.click()}>\r\n                                                <BiScreenshot className=\"icon\" />\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    : <div className=\"admin__list text text--mid tc\">{t('main.nothing here')}</div>\r\n                }\r\n                {addMode && \r\n                    <div className=\"admin__panel\">\r\n                        <div className=\"admin__panel-head flex aic jcsb\">\r\n                            <h1 className=\"heading heaing--main\">{t('main.add')}</h1>\r\n                            <button \r\n                                className=\"btn btn__circle\" \r\n                                onClick={() => setAddMode(false)}>\r\n                                    <BiX className=\"icon\" />\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"admin__panel-body\">\r\n\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {viewMode \r\n                    ? <div className=\"admin__panel\">\r\n                        {panelLoading\r\n                            ? <div className=\"wh-100 flex aic jcc\">\r\n                                <SubSpinner />\r\n                            </div>\r\n                            : <>\r\n                                {(confirm && confirm === 'skin') &&\r\n                                    <ConfirmationModel \r\n                                        click={() => onRemoveSkin(selectedSkin._id)} \r\n                                        close={() => setConfirm(null)}\r\n                                        items={`${viewMode.device}, ${selectedSkin.name}`} />\r\n                                }\r\n                                <div className=\"admin__panel-head\">\r\n                                    <div className=\"flex jcsb aic\">\r\n                                        <h1 className=\"heading heaing--main\">{viewMode.device}</h1>\r\n                                        <button \r\n                                            className=\"btn btn__circle\" \r\n                                            onClick={() => setViewMode(null)}>\r\n                                                <BiX className=\"icon\" />\r\n                                        </button>\r\n                                    </div>\r\n                                    <span className=\"admin__card-feature\">\r\n                                        {t('main.num skins')}: {viewMode.skins.length}; {t('main.avg price')}: ${parseFloat(viewMode.skins.reduce((a, el) => a + parseFloat(el.price), 0) / viewMode.skins.length).toFixed(2)}\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"admin__panel-body\">\r\n                                    <Scrollbars className=\"admin__panel-wrapper\">\r\n                                        {skins}\r\n                                    </Scrollbars>\r\n                                </div>\r\n                                <div className=\"admin__panel-footer\">\r\n                                    {selectedSkin && \r\n                                        <>\r\n                                            <button \r\n                                                className=\"admin__card-btn mr-5\" \r\n                                                onClick={() => {}}>\r\n                                                    <BiPencil className=\"icon--sm\" />\r\n                                            </button>\r\n                                            <button \r\n                                                className=\"admin__card-btn\" \r\n                                                onClick={() => setConfirm('skin')}>\r\n                                                    <BiMinus className=\"icon--sm\" />\r\n                                            </button>\r\n                                        </>\r\n                                    }\r\n                                </div>\r\n                                \r\n                            </>\r\n                        }\r\n                    </div>\r\n                    : (!addMode && <div className=\"admin__panel\"></div>)\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ActiveItemPanel = ({ close, data }) => {\r\n\r\n    return (\r\n        <div className=\"admin__panel\">\r\n            <div className=\"admin__panel-head flex aic jcsb\">\r\n                <h1 className=\"heading heaing--main\">{}</h1>\r\n                <button \r\n                    className=\"btn btn__circle\" \r\n                    onClick={close}>\r\n                        <BiX className=\"icon\" />\r\n                </button>\r\n            </div>\r\n            <div className=\"admin__panel-body\">\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Auth = ({ onAuth }) => {\r\n    const { t } = useTranslation();\r\n    const [login, setLogin] = useState('admin');\r\n    const [password, setPassword] = useState('hehe boay');\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onLogin = (e) => {\r\n        e.preventDefault();\r\n        if (login === '' || password === '')\r\n            return setError(t('error.fill all'));\r\n        setLoading(true);\r\n        axiosInstance.post('/users/login', {\r\n            login,\r\n            password\r\n        }).then((res) => {\r\n            console.log(res);\r\n            setLoading(true);\r\n            setError(null);\r\n            onAuth(res.data.token);\r\n        }).catch((er) => {\r\n            console.log(er.response.data.message);\r\n            setError(er.response.data.message);\r\n            setLoading(false);\r\n        });\r\n\r\n    };\r\n\r\n    if (loading)\r\n        return <Spinner />;\r\n\r\n    return (\r\n        <div className=\"auth\">\r\n            <div className=\"container\">\r\n                <div className=\"auth__wrapper\">\r\n                    <div className=\"auth__content\">\r\n                        <div className=\"auth__head\">\r\n                            <h1 className=\"auth__heading\">{t('nav.auth')}</h1>\r\n                            {error && <p className=\"auth__text--error\">{error}</p>}\r\n                        </div>\r\n                        <form className=\"auth__body\" onSubmit={(e) => onLogin(e)}>\r\n                            <label className=\"auth__label\">\r\n                                {t('input.y login')}\r\n                                <input \r\n                                    className=\"auth__input\" \r\n                                    placeholder={t('input.login')} \r\n                                    value={login} \r\n                                    type=\"text\"\r\n                                    onChange={(e) => setLogin(e.target.value)} />\r\n                            </label>\r\n                            <label className=\"auth__label mb-2\">\r\n                                {t('input.y password')}\r\n                                <input \r\n                                    className=\"auth__input\" \r\n                                    placeholder={t('input.password')} \r\n                                    value={password} \r\n                                    type=\"password\"\r\n                                    onChange={(e) => setPassword(e.target.value)} />\r\n                            </label>\r\n                            <button className=\"auth__btn\">\r\n                                {t('main.log in')}\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"auth__brand\">\r\n                        &copy;180Gradus {new Date().getFullYear()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPanel;\r\n\r\n// create skin, orders, all skins, categories, users\r\n// fetch all skins, preview skin, \r\n// all orders\r\n// all categories, devices per category\r\n// all users, users by type"],"sourceRoot":""}